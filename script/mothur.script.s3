#!/usr/bin/env mothur

# dir settings
set.dir(input=., output=mothur.output)
set.logfile(name=mothur.output/s3.mothur.log)

# resume last stage
set.current(current=s2.current_files.summary)

################################################################################
# P2. alignment (screening)
################################################################################
# extract alignment regions only using spotted range in above summary
screen.seqs(fasta=current, count=current, start=13870, end=23440)
summary.seqs(fasta=current, count=current)
# filter seqs that are overlapping the same range on reference
# NOTE: vertical=T removes columns containing *ONLY* gap
# NOTE: trump=. removes columns if any seq contains a gap
# (trump=. is more strict than vertical=T)
filter.seqs(fasta=current, vertical=T, trump=.)
# find unique seqs in shared, overlapping range
unique.seqs(fasta=current, count=current)

################################################################################
# P3. remove chimeras
################################################################################
# pre.cluster hard clustering seqs with cluster diameter of <diffs>
# in this case, maximum distances between seqs in a cluster is 2
pre.cluster(fasta=current, count=current, diffs=2)
# identify chimeras using vsearch
chimera.vsearch(fasta=current, count=current, dereplicate=t)

################################################################################
# P4. taxonomy classification
################################################################################
# classification based on provided reference
# NOTE: cutoff=80 sets the confidence to be at minimum 80%; any assignments
#	below this treshold will not be reported (but are done); using cutoff=0 will
#	force report all assignments
classify.seqs(fasta=current, count=current, reference=ref_db/silva.nr_v138_1.align, taxonomy=ref_db/silva.nr_v138_1.tax, cutoff=80)
# remove unwanted linages
remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Eukaryota)
summary.tax(taxonomy=current, count=current)
# [optional] assessing error rates if have mock community (internal control)
# NOTE: change parameters accordingly:
#	groups=Mock: group label of the mock community
#	reference=HMP_MOCK.v35.fasta: reference of the mock community
#get.groups(fasta=current, count=current, groups=Mock)
#seq.error(fasta=current, count=current, reference=HMP_MOCK.v35.fasta, #	aligned=F)
# may also with to remove the mock community in the final output
#remove.groups(fasta=current, count=current, taxonomy=current, groups=Mock)
# rename files so that we don't get super-long output filenames
rename.file(fasta=current, count=current, taxonomy=current, prefix=final)
# save current file names
get.current()
rename.file(input=current_files.summary, new=s3.current_files.summary)

################################################################################
# P5. OTU making
################################################################################
# below approach is appropiate for large datasets, where a directly calculation
# of distance matrix may be unfeasible
# first split into clusters
# NOTE: cutoff=0.03 means split clusters at 0.97 identity level (empirical)
cluster.split(fasta=current, count=current, taxonomy=current, taxlevel=4, cutoff=0.03)
# create count table for each splitted cluster
make.shared(list=current, count=current, label=0.03)
# make otu table for each splitted cluster
classify.otu(list=current, count=current, taxonomy=current, label=0.03)

################################################################################
# P6. ASV making
################################################################################
# create count table for each sequence
make.shared(count=current, label=asv)
# classify the taxonomy of each "otu (ASV)"
classify.otu(list=final.asv.list, count=current, taxonomy=current, label=asv)
